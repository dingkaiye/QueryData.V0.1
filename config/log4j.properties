# TRACE < DEBUG < INFO < WARNING < ERROR < FATAL < OFF
log4j.rootLogger=DEBUG,rootLogger

#系统日志
log4j.logger.SysLog=info, SysLogStd, SysLogger

log4j.appender.SysLogStd=org.apache.log4j.ConsoleAppender
log4j.appender.SysLogStd.layout=org.apache.log4j.PatternLayout
log4j.appender.SysLogStd.layout.ConversionPattern=[%d{ISO8601}][%t]%C[%L][%-5p]: %m%n
log4j.appender.SysLogger=org.apache.log4j.DailyRollingFileAppender
log4j.appender.SysLogger.DatePattern='.'yyyyMMdd
log4j.appender.SysLogger.File=./log/SysLog.log
log4j.appender.SysLogger.Append=true
log4j.appender.SysLogger.Threshold=INFO
log4j.appender.SysLogger.layout=org.apache.log4j.PatternLayout
log4j.appender.SysLogger.layout.ConversionPattern=[%d{ISO8601}][%t]%C[%L][%-5p]: %m%n

#log4j 模块 
#log4j.logger.log4j=info, log4jStd, log4jLogger
log4j.logger.log4j=info, log4jLogger

log4j.appender.log4jStd=org.apache.log4j.ConsoleAppender
log4j.appender.log4jStd.layout=org.apache.log4j.PatternLayout
log4j.appender.log4jStd.layout.ConversionPattern=[%d{ISO8601}][%t]%C[%L][%-5p]: %m%n

log4j.appender.log4jLogger=org.apache.log4j.DailyRollingFileAppender
log4j.appender.log4jLogger.DatePattern='.'yyyyMMdd
log4j.appender.log4jLogger.File=./log/log4j.log
log4j.appender.log4jLogger.Append=true
log4j.appender.log4jLogger.Threshold=INFO
log4j.appender.log4jLogger.layout=org.apache.log4j.PatternLayout
log4j.appender.log4jLogger.layout.ConversionPattern=[%d{ISO8601}][%t]%C[%L][%-5p]: %m%n

#交易日志 
log4j.logger.TxnLog=info, TxnLogStd, TxnLoger
#log4j.logger.TxnLog=TRACE, TxnLoger

log4j.appender.TxnLogStd=org.apache.log4j.ConsoleAppender
log4j.appender.TxnLogStd.layout=org.apache.log4j.PatternLayout
log4j.appender.TxnLogStd.layout.ConversionPattern=[%d{ISO8601}][%t]%C[%L][%-5p]: %m%n

log4j.appender.TxnLoger=org.apache.log4j.RollingFileAppender
log4j.appender.TxnLoger.File=./log/TxnLog.log
log4j.appender.TxnLoger.MaxFileSize=80MB
log4j.appender.TxnLoger.MaxBackupIndex=50
log4j.appender.TxnLoger.layout=org.apache.log4j.PatternLayout
log4j.appender.TxnLoger.layout.ConversionPattern=[%d{ISO8601}][%t]%C[%L][%-5p]: %m%n

log4j.appender.rootLogger=org.apache.log4j.DailyRollingFileAppender
log4j.appender.rootLogger.DatePattern='.'yyyyMMdd
log4j.appender.rootLogger.File=./log/rootLog.log
log4j.appender.rootLogger.Append=true
log4j.appender.rootLogger.Threshold=INFO
log4j.appender.rootLogger.layout=org.apache.log4j.PatternLayout
log4j.appender.rootLogger.layout.ConversionPattern=[%d{ISO8601}][%t]%C[%L][%-5p]: %m%n

#set logger appenders
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=[%d{ISO8601}][%t]%C[%L][%-5p]: %m%n

#set logger appenders


#log4j.rootLogger=WARN, stdout
## log4j.rootLogger=WARN, stdout, logfile
#
#log4j.appender.stdout=org.apache.log4j.ConsoleAppender
#log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
#log4j.appender.stdout.layout.ConversionPattern=%d %p [%c] - %m%n
#
#log4j.appender.logfile=org.apache.log4j.FileAppender
#log4j.appender.logfile.File=target/spring.log
#log4j.appender.logfile.layout=org.apache.log4j.PatternLayout
#log4j.appender.logfile.layout.ConversionPattern=%d %p [%c] - %m%n



#set appender SysLogger writes to the file "SysLog".
#log4j.appender.SysLogger=org.apache.log4j.DailyRollingFileAppender
#log4j.appender.SysLogger.File=./log/SysLog.log
#log4j.appender.SysLogger.MaxFileSize=80MB
#log4j.appender.SysLogger.MaxBackupIndex=50
#log4j.appender.SysLogger.layout=org.apache.log4j.PatternLayout
#log4j.appender.SysLogger.layout.ConversionPattern=[%d{ISO8601}][%t] [%-5p] %m%n

# org.apache.log4j.ConsoleAppender（控制台）
# org.apache.log4j.FileAppender（文件）
# org.apache.log4j.DailyRollingFileAppender（每天产生一个日志文件）
# org.apache.log4j.RollingFileAppender（文件大小到达指定尺寸的时候产生一个新的文件）
# org.apache.log4j.WriterAppender（将日志信息以流格式发送到任意指定的地方）

#打印参数:
#
# 　  %m   输出代码中指定的消息
#　　%p   输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL 
#　　%r   输出自应用启动到输出该log信息耗费的毫秒数 
#　　%c   输出所属的类目，通常就是所在类的全名 
#   %M   日志所在方法名
#   %L   日志行号
#　　%t   输出产生该日志事件的线程名 
#　　%n   输出一个回车换行符，Windows平台为“/r/n”，Unix平台为“/n” 
#　　%d   输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy MMM dd HH:mm:ss , SSS}，输出类似：2002年10月18日  22 ： 10 ： 28 ， 921  
#　　%l   输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。举例：Testlog4.main(TestLog4.java: 10 ) 


#	AddLogger(Logger)	添加指定的 Logger。
#	GetLogger(String)	查找指定 Logger 的方法。
#	GetLoggerNames		获取已知 Logger 名称的数组。
#	GetLoggingSetting<T>(String)	获取日志配置中某配置元素的值。
#	GetLogManager		返回全局 LogManager 对象。
#	ReadConfiguration	读取默认的日志配置文件（Logging.config），并重新配置所有已知的 Logger。
#	ReadConfiguration(Configuration)	从给定的配置文件读取日志配置，并重新配置所有已知的 Logger。
#	Reset	重置日志配置。
